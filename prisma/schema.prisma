generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Product {
    id          Int            @id @default(autoincrement())
    name        String
    slug        String         @unique
    description String
    price       Float
    discount    Float?
    brand       String
    category    Category       @relation(fields: [categoryId], references: [id])
    categoryId  Int
    stock       Int
    images      String[]
    colors      String[]
    memory      String[]
    reviews     Review[]
    items       CartItem[]
    wishlist    WishlistItem[]
    specs       ProductSpec[]
    popularity  Int            @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductSpec {
    id        Int     @id @default(autoincrement())
    product   Product @relation(fields: [productId], references: [id])
    productId Int
    key       String
    value     String
}

model Category {
    id       Int       @id @default(autoincrement())
    name     String
    slug     String    @unique
    image    String
    products Product[]
}

model Review {
    id      Int    @id @default(autoincrement())
    rating  Float
    comment String

    product   Product @relation(fields: [productId], references: [id])
    productId Int

    user   User @relation(fields: [userId], references: [id])
    userId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id       Int       @id @default(autoincrement())
    name     String
    email    String    @unique
    password String
    reviews  Review[]
    role     Role      @default(USER)
    cart     Cart?
    wishlist Wishlist?
    orders   Order[]

    provider   String?
    providerId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Cart {
    id          Int        @id @default(autoincrement())
    user        User?      @relation(fields: [userId], references: [id])
    userId      Int?       @unique
    token       String
    totalAmount Float      @default(0)
    items       CartItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id        Int     @id @default(autoincrement())
    cart      Cart    @relation(fields: [cartId], references: [id])
    cartId    Int
    product   Product @relation(fields: [productId], references: [id])
    productId Int
    quantity  Int     @default(1)
}

model Order {
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?

    token String

    totalAmount Int
    status      OrderStatus
    paymentId   String?

    items Json

    name    String
    email   String
    phone   String
    address String
    comment String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Wishlist {
    id     Int            @id @default(autoincrement())
    user   User?          @relation(fields: [userId], references: [id])
    userId Int?           @unique
    token  String?
    items  WishlistItem[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model WishlistItem {
    id         Int      @id @default(autoincrement())
    wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
    wishlistId Int
    product    Product  @relation(fields: [productId], references: [id])
    productId  Int
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}

enum Role {
    USER
    ADMIN
}
